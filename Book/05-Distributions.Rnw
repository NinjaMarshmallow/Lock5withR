\Sexpr{set_parent('Lock5withR.Rnw')}

\setcounter{chapter}{4}
\Chapter{Approximating with a Distribution}

\section{Normal Distributions}

\subsection*{Density Curves}

\subsubsection*{Example 5.1}
\authNote{didn't bring textbook home so won't be able to compare to textbook over break}
<<Example5.1, cache = TRUE, seed = 1234>>=
Bootstrap <- do(1000) * mean( ~ Time, data = resample(CommuteAtlanta))
head(Bootstrap, 3)
gf_dhistogram( ~ mean, data = Bootstrap)
gf_dens( ~ mean, data = Bootstrap)
@

<<Figure5.2, include = FALSE>>=
<<Example5.1>>
@


<<Example5.1b>>=
prop( ~ (mean <= 30), data = Bootstrap)                # proportion less than 30 min
prop( ~ (mean >= 31), data = Bootstrap)                # proportion greater than 31 min
prop( ~ (mean >= 30 & mean <= 31), data = Bootstrap)   # proportion between 30 and 31 min
@


\subsection*{Normal Distributions}

Normal distributions
\begin{itemize}
\item  are symmetric, unimodel, and bell-shaped
\item can have any combination of mean and standard deviation (as long as the standard deviation is positive)
\item satisfy the 68--95--99.7 rule:

Approximately 68\% of any normal distribution lies within 1 standard deviation of the mean.

Approximately 95\% of any normal distribution lies within 2 standard deviations of the mean.

Approximately 99.7\% of any normal distribution lies within 3 standard deviations of the mean.
\end{itemize}

Many naturally occurring distributions are approximately normally distributed. Normal distributions are also an important part of statistical inference.
The \function{gf_dist()} function can be used to plot many common distributions.

\subsubsection*{Figure 5.5}

<<Figure5.5>>=
gf_dist("norm", mean = 0, sd = 1, xlim = c(-5, 6)) %>%
  gf_dist("norm", mean = 2, sd = 1, colour = "red")
@

<<Figure5.5b, opts.label = "fig3">>=
gf_dist("norm", mean = 0, sd = 0.5, xlim = c(-5, 5)) 
  gf_dist("norm", mean = 0, sd = 2, colour = "red") %>%
  gf_dist("norm", mean = 0, sd = 3, colour = "green")
@
\authNote{I ended up deleting repetitive graphs that layered plots one at a time, also the sd argument doesn't seem to be able to handle values between 0 and 1 when the xlim isn't between 0 and 1, originally this was sd = .5, 1, 2}
\subsubsection*{Example 5.2}

<<Example5.2, opts.label = "fig3", fig.keep = 'all', fig.show = 'hold'>>=
gf_dist("norm", mean = 75, sd = 10, xlim = c(40, 110))
gf_dist("norm", mean = 7.1, sd = 1.1, xlim = c(2.7, 11.5))
gf_dist("norm", mean = 0, sd = 0.02, xlim = c(-.07, .07))
@

<<Figure5.6, include = FALSE>>=
<<Example5.2>>
@


\subsection*{Finding Normal Probabilities and Percentiles}

The two main functions we need for working with normal distributions are \function{pnorm} and \function{qnorm}.
\function{pnorm} computes the proportion of a normal distribution below a specified value:

\[
\mbox{\texttt{pnorm(x, mean = $\mu$, sd = $\sigma$)}} = \Prob(X \le x)
\]
when $X \sim \Norm(\mu, \sigma)$.

We can obtain arbitrary probabilities using \verb!pnorm()!

\subsubsection*{Example 5.3}

<<Example5.3, opts.label = "fig4">>=
pnorm(90, 75, 10, lower.tail = FALSE) # proportion of scores above 90
xpnorm(90, 75, 10, lower.tail = FALSE)
@
\authNote{this isn't in lattice, it seems like it may be another wrapper for ggplots? should I replace with ggformula?}
The \function{xpnorm()} function gives a bit more verbose output and also gives you a picture. Notice the \argument{lower.tail = FALSE}. This is added because the default for \function{pnorm} and \function{xpnorm} finds the lower tail, not the upper tail. However, we can also subtract the proportion of the lower tail from 1 to find the the proportion of the upper tail.

<<Figure5.7, include = FALSE>>=
<<Example5.3>>
@

\subsubsection*{Example 5.4}

\function{qnorm()} goes the other direction:  You provide the quantile (percentile expressed as a decimal) and \R\ gives you the value.
<<Example5.4, opts.label = "fig4">>=
qnorm(0.2, 75, 10) # 20th percentile in Norm(75, 10)
xqnorm(0.2, 75, 10)  
@
\authNote{should I replace?}
<<Figure5.8, include = FALSE>>=
<<Example5.4>>
@

\subsection*{Standard Normal N(0,1)}

Because probabilities in a normal distribution depend only on the number of standard deviations above and below the mean, it is useful to define $Z$-scores (also called standardized scores) as follows:

\[
\mbox{$Z$-score} = \frac{ \mbox{value} - \mbox{mean} } { \mbox{standard deviation} }
\]

If we know the population mean and standard deviation, we can plug those in.  When we do not, we will use the mean and standard deviation of a random sample as an estimate.

Z-scores provide a second way to compute normal probabilities.

\subsubsection*{Example 5.5}

<<Example5.5, tidy = FALSE, opts.label = "fig4">>=
z30 <- (30 - 29.11) / 0.93; z30  # z-score for 30 min
z31 <- (31 - 29.11) / 0.93; z31  # z-score for 31 min
xpnorm(c(30, 31), 29.11, 0.93)   # original normal distribution proportion between 30 and 31 min
xpnorm(c(z30, z31))              # standardized distribution proportion between 30 and 31 min
pnorm(z31) - pnorm(z30)
@
\authNote{replace?}
<<Figure5.9, include = FALSE>>=
<<Example5.5>>
@

<<Example5.5b, tidy = FALSE, opts.label = "fig4">>=
xpnorm(0.957)                      # proportion with z-score below 0.957
xpnorm(2.032, lower.tail = FALSE)  # proportion with z-score above 2.032
pnorm(30, 29.11, 0.93)          
pnorm(31, 29.11, 0.93, lower.tail = FALSE)
@
\authNote{replace?}
<<Figure5.10, include = FALSE>>=
<<Example5.5b>>
@

\subsubsection*{Example 5.6}

<<Example5.6>>=
z <- qnorm(0.2); z
75 + z * 10
@


\section{Confidence Intervals and P-values Using Normal Distributions}

\subsection*{Confidence Intervals Based on a Normal Distribution}

\subsubsection*{Example 5.7}
<<Example5.7, cache = TRUE, seed = 1234>>=
Bootstrap <- do(1000) * mean( ~ Time, data = resample(CommuteAtlanta)) 
gf_dotplot( ~ mean, binwidth = 0.1, dotsize = .6, data = Bootstrap)
@

<<Figure5.15, include = FALSE>>=
<<Example5.7>>
@

<<Example5.7b>>=
xqnorm(c(0.025, 0.975), 29.11, 0.915)   # 95% confidence interval for the normal distribution
@
\authNote{replace?}
<<Figure5.16, include = FALSE>>=
<<Example5.7b>>
@

<<Example5.7c>>=
qnorm(0.005, 29.11, 0.915) # lower endpoint for 99% confidence interval
qnorm(0.995, 29.11, 0.915) # upper endpoint for 99% confidence interval

qnorm(0.05, 29.11, 0.915) # lower endpoint for 90% confidence interval
qnorm(0.95, 29.11, 0.915) # upper endpoint for 90% confidence interval
@

\subsubsection*{Example 5.8}
<<Example5.8>>=
qnorm(0.005, 13.10, 0.20) # lower endpoint for 99% confidence interval
qnorm(0.995, 13.10, 0.20) # upper endpoint for 99% confidence interval
@

\subsection*{P-values Based on a Normal Distribution}

\subsubsection*{Example 5.9}
<<Example5.9, cache = TRUE, seed = 1234, opt.label = "fig1">>=
Randomization.Temp <- do(10000) * (mean( ~ BodyTemp, data = resample(BodyTemp50)) + 0.34)
gf_dhistogram( ~ result, binwidth = .025, data = Randomization.Temp) %>%
  gf_fitdistr()
@
\footnote{\function{gf_fitdistr()} has default arguments that will add a normal distribution, these defaults can be changed}
\authNote{the original graph used 'mean' as the variable but Randomization.Temp only contains 'result' so I switched it to that }
<<Example5.9b>>=
pnorm(98.26, 98.6, 0.1066)
2 * pnorm(98.26, 98.6, 0.1066)
@
<<Example5.9c>>=
z <- (98.26 - 98.6) / 0.1066; z
pnorm(z)
2 * pnorm(z)
@

\subsubsection*{Example 5.10}
<<Example5.10>>=
pnorm(0.66, 0.65, 0.013, lower.tail = FALSE)
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\iffalse
<<plotnorm, echo = FALSE>>=
plotnorm <- function(
		mean = 0, sd = 1,
		lower = -Inf, upper = Inf,
		n = 750, xlim, xlab = "", ylab = "", 
		groups, lwd = 2, lty = 1,
		main = paste("N(", mean, ",", sd, ")", sep = ""),
		scales = list(y = list(draw = FALSE)),
		col = trellis.par.get('superpose.polygon')$col,
		add.text = TRUE,
		digits = 3,
		cex = 1,
		...)
{
	if (missing(xlim)) {
		xlim <- mean + c(-1, 1) * 4.5 * sd
	}


	x <- seq(xlim[1], xlim[2], by= diff(xlim)/n)
		y <- dnorm(x, mean = mean, sd = sd)

		if (missing(groups)) { groups = ((x > lower) + (x > upper)) }

	middle.prob = round(pnorm(upper, mean, sd) - pnorm(lower, mean, sd), digits)
		upper.prob = round(1 - pnorm(upper, mean, sd), digits)
		lower.prob = round(pnorm(lower, mean, sd), digits)

		xyplot(y ~ x, xlab = xlab, ylab = ylab, lwd = lwd, lty = lty, scales = scales, groups = groups,
				main= main,
				panel = function(x, y, ...) {
				panel.xyplot(x, y, type = 'h' , col = col, ...)
				panel.xyplot(x, y, type = 'l', lwd = 3)
				if (is.finite(upper) && !is.finite(lower) && add.text && FALSE) {
				grid.text(x = .98, y = unit(1, 'npc')-unit(5, 'lines'), 
					bquote(P(X>.(upper)) == .(upper.prob)),
					gp = gpar(cex = cex),
					just = 'right'
					)
				}
				if (is.finite(lower) && add.text && FALSE) {
				grid.text(x = .02, y = unit(1, 'npc')-unit(5, 'lines'), 
					bquote(P(X<.(lower)) == .(lower.prob)), 
					gp = gpar(cex = cex),
					just = 'left'
					)
				}
				if (is.finite(upper) && is.finite(lower) && add.text) {
				grid.text(x = unit(mean(c(lower, upper)), 'native'), y = unit(0, 'native')+unit(1, 'lines'), 
					bquote(.(middle.prob)), gp = gpar(cex = cex),
					just = 'center'
					)
				}
				},
				...)
}
@
\authNote{is this making or just showing the plotnorm function?}
\section{The Family of Normal Distributions}

Normal Distributions
\begin{itemize}
\item  are symmetric, unimodel, and bell-shaped
\item can have any combination of mean and standard deviation (as long as the standard deviation is positive)
\item satisfy the 68--95--99.7 rule:

Approximately 68\% of any normal distribution lies within 1 standard deviation of the mean.

Approximately 95\% of any normal distribution lies within 2 standard deviations of the mean.

Approximately 99.7\% of any normal distribution lies within 3 standard deviations of the mean.
\end{itemize}

<<normal-68-95-99.7, echo = FALSE, fig.height = 2.0, fig.width = 2, fig.show = "hold", out.width = ".3\\textwidth">>=
trellis.par.set(superpose.polygon = list(col = c('gray50', 'gray80', 'gray50')))
print(plotnorm(lower = -1, upper = 1, main = "", xlab = "standard deviations from the mean"))
print(plotnorm(lower = -2, upper = 2, main = "", xlab = "standard deviations from the mean"))
print(plotnorm(lower = -3, upper = 3, main = "", xlab = "standard deviations from the mean"))
@
\authNote{not sure how to make this with gf_dist()}
Many naturally occurring distributions are approximately normally distributed.

Normal distributions are also an important part of statistical inference.


\newpage

\subsubsection*{Example: SAT scores}

SAT scores used to be approximately normally distributed with a mean of 500 and a standard deviation of 100, so
\begin{itemize}
\item
approximately 68\% of scores were between 400 and 600
\item
approximately 95\% of scores were between 300 and 700
\item
approximately 2.5\% of scores were above 700 
\item
approximately \Sexpr{34 + 47.5}\% (34\% + 47.5\%) of scores are between 400 and 700
\end{itemize}

The two main functions we need for working with normal distributions are \function{pnorm} and \function{qnorm}.
\function{pnorm} computes the proportion of a normal distribution below a specified value:


\[
\mbox{\texttt{pnorm(x, mean = $\mu$, sd = $\sigma$)}} = \Prob(X \le x)
\]
when $X \sim \Norm(\mu, \sigma)$.

We can obtain arbitrary probabilities using \verb!pnorm()!:
<<pnorm-1>>=
pnorm(650, 500, 100)                     # proportion who score below 650 on SAT
1-pnorm(650, 500, 100)                   # proportion who score above 650 on SAT
pnorm(650, 500, 100) - pnorm(400, 500, 100)  # proportion who score between 400 and 650 on SAT
@

<<SAT-1, echo = FALSE, fig.height = 2.0, fig.width = 2, out.width = ".3\\textwidth">>=
trellis.par.set(superpose.polygon = list(col = c('gray80', 'gray50', 'gray50')))
print(plotnorm(500, 100, lower = -300, upper = 650, main = "", xlab = "SAT score", digits = 3))
print(plotnorm(500, 100, upper = 1050, lower = 650, main = "", xlab = "SAT score", digits = 3))
print(plotnorm(500, 100, lower = 400, upper = 650, main = "", xlab = "SAT score", digits = 3))
@


\function{qnorm()} goes the other direction:  You provide the quantile (percentile expressed as a decimal) and 
\R\ gives you the value.
<<qnorm>>=
# find 80th percentile in Norm(500, 100)
qnorm(.80, 500, 100)
@

The \function{xpnorm()} function gives a bit more verbose output and also gives you a picture.
<<xpnorm, fig.height = 2.5, fig.width = 4>>=
xpnorm(700, 500, 100)
@

\subsection*{Z-scores (standardized scores)}

Because probabilities in a normal distribution depend only on the number of standard deviations above and below the mean,
it is useful to define $Z$-scores (also called standardized scores) as follows:

\[
\mbox{$Z$-score} = \frac{ \mbox{value} - \mbox{mean} } { \mbox{standard deviation} }
\]
If we know the population mean and standard deviation, we can plug those in.  When we do not, we will use 
the mean and standard deviation of a random sample as an estimate.

Z-scores provide a second way to compute normal probabilities:

<<tidy = FALSE>>=
pnorm (650, 500, 100)    # proportion of SATs below 650 
z <- (650 - 500) / 100     # z-score
pnorm (1.5)                # proportion with z-score below 1.5
@


\fi