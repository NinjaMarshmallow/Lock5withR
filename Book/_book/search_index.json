[
["getting-started-with.html", "1 Getting Started With ", " 1 Getting Started With ## %s{Logging in and changing your password} You should change your password. Here’s how. provides an integrated development environment (IDE) for that makes much easier to use. It is freely available from in versions for Macintosh, PC, or Linux. RStudio server provides access to via a web browser. We will generally assume that is being used throughout. Although most things can be done without as well, our descriptions may apply only to . is divided up into packages. A few of these are loaded every time you run , but most have to be selected. This way you only have as much of as you need. In the tab in , check the boxes next to the following packages to load them: You can also load these packages with the following commands: &lt;&gt;= require(Lock5withR) require(mosaic) require(mosaicData) @ We will always assume that these three packages have been loaded. Notice that divides its world into four panels. Several of the panels are further subdivided into multiple tabs. The console panel is where we type commands that will execute. can be used as a calculator. Try typing the following commands in the console panel. % % % &lt;&gt;= 5 + 3 15.3 * 23.4 sqrt(16) @ You can save values to named variables for later reuse &lt;&gt;= product = 15.3 * 23.4 # save result product # show the result product &lt;- 15.3 * 23.4 # &lt;- is assignment operator, same as = product 15.3 * 23.4 -&gt; newproduct # -&gt; assigns to the right newproduct .5 * product # half of the product log(product) # (natural) log of the product log10(product) # base 10 log of the product log(product, base = 2) # base 2 log of the product @ The semi-colon can be used to place multiple commands on one line. One frequent use of this is to save and print a value all in one go: &lt;&gt;= 15.3 * 23.4 -&gt; product; product # save result and show it @ "],
["getting-help-in-rstudio.html", "2 Getting Help in RStudio 2.1 %s{The (ref:RStudio) help system} 2.2 %s{History} 2.3 %s{Error messages}", " 2 Getting Help in RStudio 2.1 %s{The (ref:RStudio) help system} There are several ways to get (ref:RStudio) to help you when you forget something. Most objects in packages have help files that you can access by typing something like: &lt;&gt;= ?bargraph ?histogram ?HELPrct @ You can search the help system using &lt;&gt;= help.search(‘Grand Rapids’) # Does R know anything about Grand Rapids? @ This can be useful if you don’t know the name of the function or data set you are looking for. 2.2 %s{History} If you know you have done something before, but can’t remember how, you can search your history. The history tab shows a list of recently executed commands. There is also a search bar to help you find things from longer ago. 2.3 %s{Error messages} When things go wrong, (ref:R-package) tries to help you out by providing an error message. If you can’t make sense of the message, you can try copying and pasting your command and the error message and sending to me in an email. One common error message is illustrated below. &lt;&gt;= fred &lt;- 23 frd @ The object frd is not found because it was mistyped. It should have been fred. If you see an “object not found” message, check your typing and check to make sure that the necessary packages have been loaded. "],
["four-things-to-know-about-refr-package-computers-are-great-for-doing-complicated-computations-quickly-but-you-have-to-speak-to-them-on-their-terms-here-are-few-things-that-will-help-you-communicate-with-refr-package.html", "3 Four Things to Know About (ref:R-package) Computers are great for doing complicated computations quickly, but you have to speak to them on their terms. Here are few things that will help you communicate with (ref:R-package)", " 3 Four Things to Know About (ref:R-package) Computers are great for doing complicated computations quickly, but you have to speak to them on their terms. Here are few things that will help you communicate with (ref:R-package) Most often, data sets in are stored in a structure called a . There are a number of data sets built into and many more that come in various add on packages. The package, for example, contains all the data sets from our text book. In the book, data set names are printed in bold text. You can see a list of them using &lt;&gt;= data(package = “Lock5withR”) @ You can find a longer list of all data sets available in any loaded package using &lt;&gt;= data() @ The data frame from the package contains data from the Health Evaluation and Linkage to Primary Care randomized clinical trial. You can find out more about the study and the data in this data frame by typing &lt;&gt;= ?HELPrct @ Among other things, this will tell us something about the subjects in this study: It is often handy to look at the first few rows of a data frame. It will show you the names of the variables and the kind of data in them: &lt;&gt;= head(HELPrct) @ That’s plenty of variables to get us started with exploration of data. So far we have been using data that lives in packages. This has allowed us to focus on things like how to make plots and create numerical summaries without worrying too much about the data themselves. But if you are going to do any of your own statistical analyses, then you will need to import your own data into and have some tools for manipulating the data once it is there. Excel or Google spreadsheets are reasonable tools for entering (small) data sets by hand and doing basic data tidying (organizing) and cleaning (correcting errors). This section describes how to get data from a spreadsheet into . If you are creating your own data in a spreadsheet with the intent of bringing into (or some other statistical package) for analysis, it is important that you design your spreadsheet appropriately. For most data sets this will mean The comma separated values (csv) format has become a standard way of transferring data between programs. Both Google and Excel can export to this format, and can import from this format. Once your dataare ready to go, export them to csv. Give the file a good name, and remember where you have put it. To get the data from your computer onto the server, you need to the data. (You can skip this step if you are working with a local copy of .) Uploading transfers a copy of your data from your computer onto the server (the ``cloud’’). This is like uploading pictures to Facebook so you can later use them in posts or as a cover photo or tag your friends or whatever else once the photo is on Facebook. To upload the data, go to the tab and click on : A window will pop up prompting you to browse to the file’s location on your computer. Choose the file and it will upload to the server. You should see it appear in your file menu. Now that the file is on the server, you can import it into . This takes place in the tab. Once there, choose and then . The instructions are pretty clear from there, but here are some things to watch for: The data set should now be ready for use in . The new package provides a number of utilities for reading and writing between R and Google sheets. At the time of this writing, it is in active development and available via github. Even if you primarily use the interface to import data, it is good to know about the command line methods since these are required to import data into scripts, RMarkdown, and Rnw files. CSV files (and a few other types of files as well) can be read with &lt;&gt;= someData &lt;- read.file(“file.csv”) @ This can be used to read data directly from a URL as well. For example, here is some data from the US Census Bureau: &lt;&gt;= Population &lt;- read.file( “https://www.census.gov/popest/data/national/totals/2012/files/NST_EST2012_ALLDATA.csv” ) dim(Population) head(Population, 4) @ Many web sites provide data in csv format. Here some examples: But be aware that some of these files might need to be cleaned up a bit before they are usable for statistics. Also, some internet files are very large and may take a while to download. Many sites will give an indication of the size of the data set so you know what you are in for. The better sites will include links to a code book (a description of all the variables, units used, how and when the data were collected, and any other information relevant to interpreting the data). Such a document is available for the population data loaded above. You can find it at The argument can be used to specify codes for missing values. The following can be useful, for example: &lt;&gt;= someData &lt;- read.file(‘file.csv’, na.strings = ‘.’) someData &lt;- read.file(‘file.csv’, na.strings = ‘-’) @ because SAS uses a period () to code missing data, and some csv exporters use `’. By default reads these as string data, which forces the entire variable to be of character type instead of numeric. Many packages provide the ability to load data from special data files. If you have data in some other format, there may well be a package that makes it easy to load your data into R. For example, several packages (including ) provide the ability to read data directly from Excel files without first saving the data as a csv file. If you make frequent use of Excel spreadsheets, you may find this convenient. provides the ability to manage data with Dropbox. And the package provides functions to read data from a wide range of other statistical packages. But since these typically all know how to read and write csv files, learning a workflow that goes through CSV is a broadly applicable skill. Most of what we will do in this chapter makes use of a single template: #1{} #1{} \\[ \\phbox{goal} \\; ( \\; \\phbox{yl} \\; \\sim \\; \\phbox{yl} \\;, \\; \\texttt{data}=\\phbox{mydata} \\; ) \\] It is useful if we name the slots in this template: \\[ \\ttfbox{goal} \\; ( \\;\\ttfbox{y} \\;\\sim \\;\\ttfbox{x} \\;, \\; \\texttt{data}=\\ttfbox{mydata} \\; ) \\] Actually, there are some variations on this template: &lt;&gt;= ### Simpler version – for just one variable goal( ~ x, data = mydata ) 3.0.1 Fancier version: goal( y ~ x | z , data = mydata ) 3.0.2 Unified version: goal( formula , data = mydata ) @ To use the template (we’ll call it the formula template because there is always a formula involved), you just need to know what goes in each slot. This can be determined by asking yourself two questions: Let’s try an example. Suppose we want to make this plot &lt;&gt;= require(mosaicData) xyplot(births ~ date, data = Births78) @ The command can be used to create subsets. The population data set we downloaded has population for states and various other regions. If we just want the states, we can select the items where the variable is greater than 0. (Notice the double equals for testing equality.) &lt;&gt;= States &lt;- filter(Population, State&gt;0) dim(States) @ That two states too many. We can scan the list to see what else is in there. &lt;&gt;= States$name @ The two extras are Washington, DC and Peurto Rico. chooses rows from a data frame. selects columns. This can be handy if you have a data set with many more variables than you are interested in. Let’s pick just a handful from the data set. &lt;&gt;= States2 &lt;- select(States, Name, POPESTIMATE2010, POPESTIMATE2011, POPESTIMATE2012) @ Sometimes it is easier to think about dropping variables. We can use for this as well: &lt;&lt;&gt;&gt;= iris2 &lt;- select(iris, - Sepal.Width, - Sepal.Length) # the minus sign means drop head(iris2, 3) @ We can add a new variable to data set using : &lt;&gt;= head(iris, 3) iris3 &lt;- mutate(iris, Sepal.Ratio = Sepal.Length / Sepal.Width, Petal.Ratio = Petal.Length / Petal.Width ) head(iris3, 3) States3 &lt;- mutate(States2, Pop.Increase = 100 * (POPESTIMATE2012 - POPESTIMATE2010)/POPESTIMATE2010 ) histogram( ~ Pop.Increase, data = States3, width = 0.5, main = “% Population increase (2010 to 2012)”) @ Generally, it is a good idea to keep raw data (like and in your data file, but let do the computation of derived variables for you. Among other advantages, if you ever fix an error in a measurement, you don’t have to worry about remembering to also recompute the ratio. Futhermore, your code documents how the derived value was computed. can be used to save data from into csv formatted files. This can be useful for exporting to some other program. &lt;&gt;= write.csv(iris3, “iris3.csv”) @ Data can also be saved in native format. Saving data sets (and other objects) using has some advantages over other file formats: The downside is that these files are only readable in . &lt;&gt;= save(iris3, file = “iris3.rda”) # the traditional file extension is rda for R native data. load(“iris3.rda”) # loads previously saved data @ For more on importing and exporting data, especially from other formats, see the manual available on . The data frame in the package contains genotype information for a SNP (single nucleotide polymorphism) in the gene . The data frame contains phenotypes (including type 2 diabetes case/control status) for an intersecting set of individuals. We can merge these together to explore the association between genotypes and phenotypes using . %% &lt;&lt;&gt;&gt;= require(fastR) head(fusion1, 3) head(pheno, 3) @ &lt;&lt;&gt;&gt;= # merge fusion1 and pheno keeping only id’s that are in both fusion1m &lt;- merge(fusion1, pheno, by.x = ‘id’, by.y = ‘id’, all.x = FALSE, all.y = FALSE) head(fusion1m, 3) @ In this case, since the values are the same for each data frame, we could collapse and to and collapse and to . The first of these specifies which column(s) to use to identify matching cases. The second indicates whether cases in one data frame that do not appear in the other should be kept () or dropped (filling in as needed) or dropped from the merged data frame. Now we are ready to begin our analysis. &lt;&gt;= tally(~t2d + genotype, fusion1m) @ Although you can export plots from for use in other applications, there is another way of preparing documents that has many advantages. provides several ways to create documents that include text, code, output, graphics, even mathematical notation all in one document. The simplest of these is R Markdown. To create a new R Markdown document, go to File&quot;,New“, then ``R Markdown”: When you do this, a file editing pane will open with a template inserted. If you click on Knit HTML&quot;, \\RStudio\\ will turn this into an HTML file and display it for you. Give it a try. You will be asked to name your file if you haven't already done so. If you are using the \\RStudio\\ server in a browser, then your file will live on the server (in the cloud’’) rather than on your computer. If you look at the template file you will see that the file has two kinds of sections. Some of this file is just normal text (with some extra symbols to make things bold, add in headings, etc.) You can get a list of all of these mark up options by selecting the ``Mardown Quick Reference&quot; in the question mark menu. The second type of section is an code chunk. These are colored differently to make them easier to see. You can insert a new code chunk by selecting Insert Chunk&quot; from theChunks&quot; menu: (You can also type to begin and to end the code chunk if you would rather type.) You can put any code in these code chunks and the results (text output or graphics) as well as the code will be displayed in your HTML file. There are options to do things like (a) run code without displaying it, (b) run code without displaying the output, (c) controling size of plots, etc., etc. But for starting out, this is really all you need to know. R Markdown files do not have access to things you have done in your console. (This is good, else your document would change based on things not in the file.) This means that you must explicitly load data, and require packages in order to use them. In this class, this means that most of your R Markdown files will have a chunk near the beginning that includes &lt;&lt;&gt;&gt;= require(mosaic) # load the mosaic package require(Lock5withR) # get data sets from the book @ The package provides some templates that are available if you choose ``from template&quot; when creating an RMarkdown file in . Among other things, this will insert the code required to load the package, change some default settings, and include a reminder to load any additional packages you will be using. makes it easy to generate HTML, PDF, or Word documents from your RMarkdown. Just remember that if you edit any of these files after you generate them with RMarkdown, then you will need to redo those edits if you ever go back and change the RMarkdown file, but if you change the RMarkdown file, one click will generate the new HTML, PDF, or Word document. (There are even ways to get it to generate all three in one go; see the function in the package.) So it is best to keep you editing to the RMarkdown document as much as possible. % % %The preview window has an icon that looks like an arrow pointing at a window. %If you click on that the document will open in a regular browser window. From %there you can use your browser’s print features to print the document. This is a course primarily about statistics, but what exactly is ? In other words, what is this course about?% Here are some definitions of statistics from other people: Here’s a simpler definition: This definition gets at two important elements of the longer definitions above: %There’s more to it %While not exactly the same, these definitions highlight four key elements %of statistics. % Data are the raw material for doing statistics. We will learn more about different types of data, how to collect data, and how to summarize data as we go along. The goal of doing statistics is to gain some information or to make a decision – that is, to answer some question. Statistics is useful because it helps us answer questions like the following: In this sense, statistics is a science – a method for obtaining new knowledge.% %\\footnote{In German, the word for science is . Literally %translated it means ``knowledge creation’’.} Our simple definition is light on describing the context in which this takes place. So let’s add two more important aspects of statistics. The tricky thing about statistics is the uncertainty involved. If we measure one box of cereal, how do we know that all the others are similarly filled? If every box of cereal were identical and every measurement perfectly exact, then one measurement would suffice. But the boxes may differ from one another, and even if we measure the same box multiple times, we may get different answers to the question So we need to answer questions like and Even so, there is no answer to these questions that will give us absolute certainty. So we need to answer questions like In order to answer a question like , we need some way of measuring our level of certainty. This is where mathematics enters into statistics. Probability is the area of mathematics that deals with reasoning about uncertainty. %So before we can answer the statistical questions we just listed, %we must first develop some skill in probability. %Once we have developed the necessary tools to deal with uncertainty, %we will be able to give good answers to our statistical questions. %Let’s take a bird’s eye view of the processes %involved in a statistical study. %We’ll come back and fill in the details later. % % %% There is a famous story about a lady who claimed that tea with milk tasted different depending on whether the milk was added to the tea or the tea added to the milk. The story is famous because of the setting in which she made this claim. She was attending a party in Cambridge, England, in the \\(1920\\)s. Also in attendance were a number of university dons and their wives. The scientists in attendance scoffed at the woman and her claim. What, after all, could be the difference? % All the scientists but one, that is. Rather than simply dismiss the woman’s claim, he proposed that they decide how one should the claim. The tenor of the conversation changed at this suggestion, and the scientists began to discuss how the claim should be tested. Within a few minutes cups of tea with milk had been prepared and presented to the woman for tasting. Let’s take this simple example as a prototype for a statistical study. What steps are involved? At this point, you may be wondering who the innovative scientist was and what the results of the experiment were. % The scientist was R. A. Fisher, who first described this situation as a pedagogical example in his 1925 book on statistical methodology . Fisher developed statistical methods that are among the most important and widely used methods to this day, and most of his applications were biological. % You might also be curious about how the experiment came out. How many cups of tea were prepared? How many did the woman correctly identify? What was the conclusion? Fisher never says. In his book he is interested in the method, not the particular results. But let’s suppose we decide to test the lady with ten cups of tea. We’ll flip a coin to decide which way to prepare the cups. If we flip a head, we will pour the milk in first; if tails, we put the tea in first. Then we present the ten cups to the lady and have her state which ones she thinks were prepared each way. It is easy to give her a score (9 out of 10, or 7 out of 10, or whatever it happens to be). It is trickier to figure out what to do with her score. Even if she is just guessing and has no idea, she could get lucky and get quite a few correct – maybe even all 10. But how likely is that? Let’s try an experiment. I’ll flip 10 coins. You guess which are heads and which are tails, and we’ll see how you do. \\(\\vdots\\) Comparing with your classmates, we will undoubtedly see that some of you did better and others worse. Now let’s suppose the lady gets 9 out of 10 correct. That’s not perfect, but it is better than we would expect for someone who was just guessing. On the other hand, it is not impossible to get 9 out of 10 just by guessing. So here is Fisher’s great idea: Let’s figure out how hard it is to get 9 out of 10 by guessing. If it’s not so hard to do, then perhaps that’s just what happened, so we won’t be too impressed with the lady’s tea tasting ability. On the other hand, if it is really unusual to get 9 out of 10 correct by guessing, then we will have some evidence that she must be able to tell something. But how do we figure out how unusual it is to get 9 out of 10 just by guessing? We’ll learn another method later, but for now, let’s just flip a bunch of coins and keep track. If the lady is just guessing, she might as well be flipping a coin. So here’s the plan. We’ll flip 10 coins. We’ll call the heads correct guesses and the tails incorrect guesses. Then we’ll flip 10 more coins, and 10 more, and 10 more, and . That would get pretty tedious. Fortunately, computers are good at tedious things, so we’ll let the computer do the flipping for us using a tool in the package. This package is already installed in our server. If you are running your own installation of you can install using the following command: &lt;&gt;= install.packages(“mosaic”) @ The function can flip one coin &lt;&gt;= require(mosaic) rflip() @ or a number of coins &lt;&gt;= rflip(10) @ and show us the results. Typing a bunch of times is almost as tedious as flipping all those coins. But it is not too hard to tell to this a bunch of times. &lt;&gt;= do(2) * rflip(10) @ %And if we switch to a ``quiet’’ version of , %we will get much terser output – %just the counts of the number of heads (i.e., correct guesses). %&lt;&gt;= %do(100) * rflip(10) # “quiet version” of rflip() %@ Let’s get to it for us 10,000 times and make a table of the results. &lt;&gt;= set.seed(123) @ &lt;&gt;= Flips &lt;- do(10000) * rflip(10) tally(~heads, data = Flips) tally(~heads, data = Flips, format = ‘percent’) tally(~heads, data = Flips, format = ‘proportion’) @ You might be surprised to see that the number of correct guesses is exactly 5 (half of the 10 tries) only % of the time. But most of the results are quite close to 5 correct. % of the results are 4, 5, or 6, for example. And % of the results are between 3 and 7 (inclusive). But getting 8 correct is a bit unusual, and getting 9 or 10 correct is even more unusual. So what do we conclude? It is possible that the lady could get 9 or 10 correct just by guessing, but it is not very likely (it only happened in about % of our simulations). So : Although Fisher did not say how the experiment came out, others have reported that the lady correctly identified all 10 cups! This same reasoning can be applied to answer a wide range of questions that have a similar form. For example, the question of whether dogs can smell cancer could be answered essentially the same way (although it would be a bit more involved than preparing tea and presenting cups to the Lady). "]
]
